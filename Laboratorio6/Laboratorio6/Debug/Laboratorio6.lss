
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000166  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  00000202  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000789  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ce  00000000  00000000  00000a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a8  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000396  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f4  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:
	
	sei();
}

void UART_init(void){
	UBRR0 = 103;
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); //Rx int. | Rxen | Txen
  b2:	88 e9       	ldi	r24, 0x98	; 152
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //Async. | No parity | 1 stop | 8 data
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  be:	08 95       	ret

000000c0 <setup>:
}

/****************************************/
// Subrutinas sin Interrupcion
void setup(void){
	cli();
  c0:	f8 94       	cli
	
	// Entradas y Salidas
	DDRD |= (1 << DDD7) | (1 << DDD6); 
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	80 6c       	ori	r24, 0xC0	; 192
  c6:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; // Todo PORTB como salida
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 b9       	out	0x04, r24	; 4
	
	UART_init(); // Configuracion del UART
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	
	sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <send_CHAR>:
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); //Rx int. | Rxen | Txen
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //Async. | No parity | 1 stop | 8 data
}

void send_CHAR(unsigned char caracter){
	while (!(UCSR0A & (1 << UDRE0))); //Revisar si UDR está vacío
  d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	95 ff       	sbrs	r25, 5
  da:	fc cf       	rjmp	.-8      	; 0xd4 <send_CHAR>
	UDR0 = caracter;
  dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e0:	08 95       	ret

000000e2 <send_STRING>:
}

void send_STRING(char* texto){
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	8c 01       	movw	r16, r24
	uint8_t i = 0;
  ea:	c0 e0       	ldi	r28, 0x00	; 0
	while (texto[i] != '\0'){
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <send_STRING+0x12>
		send_CHAR(texto[i]);
  ee:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_CHAR>
		i++;
  f2:	cf 5f       	subi	r28, 0xFF	; 255
	UDR0 = caracter;
}

void send_STRING(char* texto){
	uint8_t i = 0;
	while (texto[i] != '\0'){
  f4:	f8 01       	movw	r30, r16
  f6:	ec 0f       	add	r30, r28
  f8:	f1 1d       	adc	r31, r1
  fa:	80 81       	ld	r24, Z
  fc:	81 11       	cpse	r24, r1
  fe:	f7 cf       	rjmp	.-18     	; 0xee <send_STRING+0xc>
		send_CHAR(texto[i]);
		i++;
	}
}
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	08 95       	ret

00000108 <main>:
volatile uint8_t received_RX = 0;
/****************************************/
// Función principal
int main(void) {
	
	setup(); // Configuraciones iniciales
 108:	0e 94 60 00 	call	0xc0	; 0xc0 <setup>
	send_STRING("Hola\r\n");
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 71 00 	call	0xe2	; 0xe2 <send_STRING>
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0xc>

00000116 <__vector_18>:
		i++;
	}
}
/****************************************/
// Subrutinas de Interrupcion
ISR(USART_RX_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	received_RX = UDR0;
 128:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 12c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	PORTB = ((received_RX & 0xFC) >> 2);
 130:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 134:	86 95       	lsr	r24
 136:	86 95       	lsr	r24
 138:	85 b9       	out	0x05, r24	; 5
	PORTD = (PORTD & 0x3F) | ((received_RX & 0x03) << 6);
 13a:	2b b1       	in	r18, 0x0b	; 11
 13c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
 140:	30 e4       	ldi	r19, 0x40	; 64
 142:	93 9f       	mul	r25, r19
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	92 2f       	mov	r25, r18
 14a:	9f 73       	andi	r25, 0x3F	; 63
 14c:	89 2b       	or	r24, r25
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
